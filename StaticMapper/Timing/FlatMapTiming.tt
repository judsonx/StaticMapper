<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)StaticMapper.Models\bin\Debug\StaticMapper.Models.dll" #>
<#@ import namespace="StaticMapper.Models" #>
<#@ import namespace="StaticMapper.Models.Generated" #>
<#@ output extension=".cs" #>
using System;
using System.Diagnostics;
using AutoMapper;
using StaticMapper.Models.Generated;
using StaticMapper.Mappings;
using StaticMapper.StaticMappings;

namespace StaticMapper.Timing
{
  public class FlatMapTiming
  {
    public void Trial<TSource, TDestination>(StaticMapRegistry registry) where TSource : new()
    {
        var sw = Stopwatch.StartNew();
        var model = new TSource();
        var amTicks = new long[4];
        var smTicks = new long[4];
        for (int j = 0; j < 4; ++j)
        {
          sw.Restart();
          var t = Mapper.Map<TDestination>(model);
          amTicks[j] = sw.ElapsedTicks;

          sw.Restart();
          var result = registry.Map<TDestination>(model);
          smTicks[j] = sw.ElapsedTicks;
        }

        Console.WriteLine(
          "{0,6}, {1,6}, {2,6}, {3, 6}",
          amTicks[0] - smTicks[0],
          amTicks[1] - smTicks[1],
          amTicks[2] - smTicks[2],
          amTicks[3] - smTicks[3]
        );
    }

    public void Run()
    {
      var sw = Stopwatch.StartNew();
      Mapper.Initialize(cfg => cfg.AddProfile<FlatMappings>());
      Console.WriteLine("Init Automapper: {0}ms", sw.ElapsedMilliseconds);

      sw.Restart();
      var registry = new StaticMapRegistry();
      registry.Initialize();
      Console.WriteLine("Init: {0}ms", sw.ElapsedMilliseconds);
<#
  var modelTypes = ModelTypeCollection.ModelTypes;
  for (int i = 1; i < modelTypes.Count(); ++i)
  {
#>
      Console.WriteLine("{0} to {1}", "<#= modelTypes[i-1].Name #>", "<#= modelTypes[i].Name #>");
      Trial<<#= modelTypes[i-1].Name #>, <#= modelTypes[i].Name #>>(registry);
<#
  }
#>
    }
  }
}
